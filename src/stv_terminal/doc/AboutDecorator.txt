# Here is decorator (colorize and suppress_print)'s definition

class ColorizedOutput:
    try:
        def __init__(self, original_stdout, start_str = None, color_code = None):
            self.original_stdout = original_stdout
            self.start = '|>' if start_str is None else start_str
            self.color_code = '\033[90m' if color_code is None else color_code

        def write(self, text):
            if text.startswith(self.start):
                self.original_stdout.write(self.color_code)
                self.original_stdout.write(text)
                self.original_stdout.write('\033[0m')
            else:
                self.original_stdout.write(text)

        def flush(self):
            self.original_stdout.flush()

        def __getattr__(self, name):
            return getattr(self.original_stdout, name)
    except Exception as e:
        print("Error In site-packages 'stv_utils' ColorizedOutput")
        print(f"[DEBUG] {e}")

def colorize(func=None, *, start_str='|>', color_code='\033[90m'):
    def decorator(f):
        def wrapper(*args, **kwargs):
            original_stdout = sys.stdout
            sys.stdout = ColorizedOutput(original_stdout, start_str, color_code)
            try:
                result = f(*args, **kwargs)
            finally:
                sys.stdout = original_stdout
            return result
        return wrapper

    if func is None:
        return decorator
    else:
        return decorator(func)


class SuppressedOutput:
    try:
        def __init__(self, original_stdout, start_str="|>", suppress: bool = True):
            self.original_stdout = original_stdout
            self.start_str = "|>" if start_str is None else start_str
            self.suppress = suppress

        def write(self, text):
            if not (self.suppress and text.startswith(self.start_str)):
                self.original_stdout.write(text)

        def flush(self):
            self.original_stdout.flush()

        def __getattr__(self, name):
            return getattr(self.original_stdout, name)
    except Exception as e:
        print("Error In site-packages 'stv_utils' SuppressedOutput")
        print(f"[DEBUG] {e}")

def suppress_print(func=None, *, start_str=None, suppress: bool = True):
    def decorator(f):
        def wrapper(*args, **kwargs):
            original_stdout = sys.stdout
            sys.stdout = SuppressedOutput(original_stdout, start_str, suppress)
            try:
                result = f(*args, **kwargs)
            finally:
                sys.stdout = original_stdout
            return result
        return wrapper

    if func is None:
        return decorator
    else:
        return decorator(func)

